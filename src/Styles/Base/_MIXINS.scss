/* Mixins f√ºr alle animation und Darklight sowie Grid und Flexboxen */

// ===========================
// SCSS MIXINS
// ===========================

// ===========================
// RESPONSIVE BREAKPOINTS
// ===========================

@mixin breakpoint($breakpoint) {
  @if $breakpoint == 'xs' {
    @media (min-width: $breakpoint-xs) { @content; }
  } @else if $breakpoint == 'sm' {
    @media (min-width: $breakpoint-sm) { @content; }
  } @else if $breakpoint == 'md' {
    @media (min-width: $breakpoint-md) { @content; }
  } @else if $breakpoint == 'lg' {
    @media (min-width: $breakpoint-lg) { @content; }
  } @else if $breakpoint == 'xl' {
    @media (min-width: $breakpoint-xl) { @content; }
  } @else if $breakpoint == '2xl' {
    @media (min-width: $breakpoint-2xl) { @content; }
  }
}

// Max-width Breakpoints
@mixin breakpoint-max($breakpoint) {
  @if $breakpoint == 'xs' {
    @media (max-width: #{$breakpoint-xs - 1px}) { @content; }
  } @else if $breakpoint == 'sm' {
    @media (max-width: #{$breakpoint-sm - 1px}) { @content; }
  } @else if $breakpoint == 'md' {
    @media (max-width: #{$breakpoint-md - 1px}) { @content; }
  } @else if $breakpoint == 'lg' {
    @media (max-width: #{$breakpoint-lg - 1px}) { @content; }
  } @else if $breakpoint == 'xl' {
    @media (max-width: #{$breakpoint-xl - 1px}) { @content; }
  }
}

// ===========================
// FLEXBOX
// ===========================

@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
  @if $gap != 0 {
    gap: $gap;
  }
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

// ===========================
// GRID
// ===========================

@mixin grid($columns: 1, $gap: $spacing-md, $auto-fit: false, $min-width: 250px) {
  display: grid;
  gap: $gap;
  
  @if $auto-fit {
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  } @else {
    grid-template-columns: repeat($columns, 1fr);
  }
}

// ===========================
// POSITION
// ===========================

@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
  position: absolute;
  @if $top != null { top: $top; }
  @if $right != null { right: $right; }
  @if $bottom != null { bottom: $bottom; }
  @if $left != null { left: $left; }
}

@mixin fixed($top: null, $right: null, $bottom: null, $left: null) {
  position: fixed;
  @if $top != null { top: $top; }
  @if $right != null { right: $right; }
  @if $bottom != null { bottom: $bottom; }
  @if $left != null { left: $left; }
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// ===========================
// TYPOGRAPHY
// ===========================

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin heading-style($size, $weight: $font-weight-bold) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height-tight;
  color: var(--color-text);
}

// ===========================
// EFFECTS
// ===========================

@mixin glass-effect {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

@mixin hover-lift {
  transition: transform $transition-normal, box-shadow $transition-normal;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }
}

@mixin hover-scale($scale: 1.05) {
  transition: transform $transition-normal;
  
  &:hover {
    transform: scale($scale);
  }
}

// ===========================
// UTILITIES
// ===========================

@mixin container {
  width: 100%;
  max-width: $container-max-width;
  margin: 0 auto;
  padding: 0 $spacing-md;
  
  @include breakpoint('md') {
    padding: 0 $spacing-lg;
  }
  
  @include breakpoint('lg') {
    padding: 0 $spacing-xl;
  }
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin reset-button {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
}

// ===========================
// ANIMATIONS
// ===========================

@mixin transition($properties: all, $duration: $transition-normal, $easing: ease-in-out) {
  transition: $properties $duration $easing;
}

@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

// ===========================
// THEME
// ===========================

@mixin themed-background {
  background-color: var(--color-background);
  color: var(--color-text);
  transition: background-color $transition-normal, color $transition-normal;
}

@mixin themed-card {
  background-color: var(--color-background-secondary);
  border: 1px solid var(--color-border);
  border-radius: $border-radius-lg;
  padding: $spacing-lg;
  box-shadow: var(--shadow-md);
  transition: all $transition-normal;
}